vec3 gradientDerivativesNoise3DHash( vec3 p )\n      {\n        '.concat(i, "\n      }\n      \n      // return value noise (in x) and its derivatives (in yzw)\n      vec4 gradientDerivativesNoise3D( in vec3 x )\n      {\n          // grid\n          vec3 p = floor(x);\n          vec3 w = fract(x);\n          \n          #if 1\n          // quintic interpolant\n          vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n          vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n          #else\n          // cubic interpolant\n          vec3 u = w*w*(3.0-2.0*w);\n          vec3 du = 6.0*w*(1.0-w);\n          #endif    \n          \n          // gradients\n          vec3 ga = gradientDerivativesNoise3DHash( p+vec3(0.0,0.0,0.0) );\n          vec3 gb = gradientDerivativesNoise3DHash( p+vec3(1.0,0.0,0.0) );\n          vec3 gc = gradientDerivativesNoise3DHash( p+vec3(0.0,1.0,0.0) );\n          vec3 gd = gradientDerivativesNoise3DHash( p+vec3(1.0,1.0,0.0) );\n          vec3 ge = gradientDerivativesNoise3DHash( p+vec3(0.0,0.0,1.0) );\n          vec3 gf = gradientDerivativesNoise3DHash( p+vec3(1.0,0.0,1.0) );\n          vec3 gg = gradientDerivativesNoise3DHash( p+vec3(0.0,1.0,1.0) );\n          vec3 gh = gradientDerivativesNoise3DHash( p+vec3(1.0,1.0,1.0) );\n          \n          // projections\n          float va = dot( ga, w-vec3(0.0,0.0,0.0) );\n          float vb = dot( gb, w-vec3(1.0,0.0,0.0) );\n          float vc = dot( gc, w-vec3(0.0,1.0,0.0) );\n          float vd = dot( gd, w-vec3(1.0,1.0,0.0) );\n          float ve = dot( ge, w-vec3(0.0,0.0,1.0) );\n          float vf = dot( gf, w-vec3(1.0,0.0,1.0) );\n          float vg = dot( gg, w-vec3(0.0,1.0,1.0) );\n          float vh = dot( gh, w-vec3(1.0,1.0,1.0) );\n        \n          // interpolations\n          return vec4( va + u.x*(vb-va) + u.y*(vc-va) + u.z*(ve-va) + u.x*u.y*(va-vb-vc+vd) + u.y*u.z*(va-vc-ve+vg) + u.z*u.x*(va-vb-ve+vf) + (-va+vb+vc-vd+ve-vf-vg+vh)*u.x*u.y*u.z,    // value\n                      ga + u.x*(gb-ga) + u.y*(gc-ga) + u.z*(ge-ga) + u.x*u.y*(ga-gb-gc+gd) + u.y*u.z*(ga-gc-ge+gg) + u.z*u.x*(ga-gb-ge+gf) + (-ga+gb+gc-gd+ge-gf-gg+gh)*u.x*u.y*u.z +   // derivatives\n                      du * (vec3(vb,vc,ve) - va + u.yzx*vec3(va-vb-vc+vd,va-vc-ve+vg,va-vb-ve+vf) + u.zxy*vec3(va-vb-ve+vf,va-vb-vc+vd,va-vc-ve+vg) + u.yzx*u.zxy*(-va+vb+vc-vd+ve-vf-vg+vh) ));\n      }\n    ")